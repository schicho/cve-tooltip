const CVE_TOOLTIP_INFO = {
    "identifier": "",
    "title": "",
    "description": "",
    "score": ""
};

// Fetch the CVE information from the API.
// Takes a CVE identifier and returns a tooltip object.
// Returns a tooltip object with an error message if the request fails.
async function getCVEFromAPI(CVEIdentifier) {
    try {
        let response = await fetch("https://cveawg.mitre.org/api/cve/" + CVEIdentifier);

        // We can read the failure message from the response body.
        if (response.status / 100 === 4) {
            let tooltip = { ...CVE_TOOLTIP_INFO };
            tooltip.identifier = CVEIdentifier;
            let data = await response.json();
            tooltip.description = "Failed to load CVE: " + data.error + ". " + data.message;
            return tooltip;
        }

        // Some other error occurred.
        if (!response.ok) {
            let tooltip = { ...CVE_TOOLTIP_INFO };
            tooltip.identifier = CVEIdentifier;
            tooltip.description = "Failed to load CVE: " + response.statusText;
            return tooltip;
        }

        let data = await response.json();
        let tooltip = createTooltipFromResponse(data);
        tooltip.identifier = CVEIdentifier;
        return tooltip;
        
    } catch (error) {
        let tooltip = { ...CVE_TOOLTIP_INFO };
        tooltip.identifier = CVEIdentifier;
        tooltip.description = "Failed to load CVE: " + error;
        return tooltip;
    }
}

// Construct a tooltip from a valid 200 API response.
// Definition of the API response can be read at https://cveproject.github.io/cve-schema/schema/docs/
function createTooltipFromResponse(data) {
    let tooltip = { ...CVE_TOOLTIP_INFO };

    if (data.containers.cna.hasOwnProperty("title")) {
        tooltip.title = data.containers.cna.title;
    }
    if (data.containers.cna.descriptions.length > 0) {
        tooltip.description = data.containers.cna.descriptions[0].value;
    }
    if (data.containers.cna.hasOwnProperty("metrics")) {
        // Metrics is defined to have atleast one element.
        // Nevertheless, we need to check if the first element has a CVSS score.
        let metricKeys = Object.keys(data.containers.cna.metrics[0]);
        if (metricKeys.length === 0 || !metricKeys[0].startsWith("cvss")) {
            tooltip.score = "No CVSS score available.";
        } else {
            let metric = data.containers.cna.metrics[0][metricKeys[0]];
            tooltip.score = "CVSS " + metric.version + ": " + metric.baseScore;
        }
    }
    return tooltip;
}

// Listener for messages from content script.
// We need to fetch the CVE information here, as the content script is subject to any website's CSP.
// In the background script, we are not subject to the CSP.
chrome.runtime.onMessage.addListener(
    function (request, sender, sendResponse) {

        setTimeout(() => {
            let tooltip = getCVEFromAPI(request.CVEIdentifier);
            sendResponse(tooltip);
        }, 0);

        // Important! Return true to indicate you want to send a response asynchronously
        // https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage#sending_an_asynchronous_response_using_sendresponse
        return true;
    }
);


